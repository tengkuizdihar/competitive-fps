[gd_resource type="ShaderMaterial" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=2]
output_port_for_preview = 0
uniform_name = "FresnelColor"

[sub_resource type="VisualShaderNodeVectorOp" id=13]

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "Smoothness"

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Metallic"

[sub_resource type="VisualShaderNodeColorConstant" id=17]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeBooleanUniform" id=18]
uniform_name = "Enable"

[sub_resource type="VisualShaderNodeIf" id=19]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeDotProduct" id=5]

[sub_resource type="VisualShaderNodeInput" id=6]
output_port_for_preview = 0
input_name = "normal"

[sub_resource type="VisualShaderNodeScalarOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
output_port_for_preview = 0
function = 2

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 5

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "FresnelExponential"

[sub_resource type="VisualShader" id=11]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx, ambient_light_disabled;

uniform float Metallic;
uniform float Smoothness;
uniform bool Enable;
uniform float FresnelExponential;
uniform vec4 FresnelColor : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// Color:16
	vec3 n_out16p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out16p1 = 1.000000;

// ScalarUniform:15
	float n_out15p0 = Metallic;

// ScalarUniform:14
	float n_out14p0 = Smoothness;

// BooleanUniform:17
	bool n_out17p0 = Enable;

// Input:5
	vec3 n_out5p0 = NORMAL;

// Input:2
	vec3 n_out2p0 = VIEW;

// VectorFunc:3
	vec3 n_out3p0 = normalize(n_out2p0);

// DotProduct:4
	float n_out4p0 = dot(n_out5p0, n_out3p0);

// ScalarOp:6
	float n_in6p0 = 1.00000;
	float n_out6p0 = n_in6p0 - n_out4p0;

// ScalarFunc:7
	float n_out7p0 = tan(n_out6p0);

// ScalarUniform:9
	float n_out9p0 = FresnelExponential;

// ScalarOp:8
	float n_out8p0 = pow(n_out7p0, n_out9p0);

// ColorUniform:11
	vec3 n_out11p0 = FresnelColor.rgb;
	float n_out11p1 = FresnelColor.a;

// VectorOp:10
	vec3 n_out10p0 = vec3(n_out8p0) * n_out11p0;

// VectorOp:12
	vec3 n_in12p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out12p0 = n_out10p0 + n_in12p1;

// If:18
	float n_in18p1 = 1.00000;
	float n_in18p2 = 0.00001;
	vec3 n_in18p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in18p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out18p0;
	if(abs((n_out17p0 ? 1.0 : 0.0) - n_in18p1) < n_in18p2)
	{
		n_out18p0 = n_out12p0;
	}
	else if((n_out17p0 ? 1.0 : 0.0) < n_in18p1)
	{
		n_out18p0 = n_in18p5;
	}
	else
	{
		n_out18p0 = n_in18p4;
	}

// Output:0
	ALBEDO = n_out16p0;
	METALLIC = n_out15p0;
	ROUGHNESS = n_out14p0;
	EMISSION = n_out18p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1210.53, -0.494486 )
modes/blend = 1
flags/ambient_light_disabled = true
nodes/fragment/0/position = Vector2( 380, 160 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( -1680, 300 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -1480, 300 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -1260, 280 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -1480, 100 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( -1080, 240 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( -860, 240 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( -640, 240 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( -840, 420 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -400, 240 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -840, 500 )
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( -180, 240 )
nodes/fragment/14/node = SubResource( 15 )
nodes/fragment/14/position = Vector2( 140, 480 )
nodes/fragment/15/node = SubResource( 16 )
nodes/fragment/15/position = Vector2( 140, 200 )
nodes/fragment/16/node = SubResource( 17 )
nodes/fragment/16/position = Vector2( 180, 80 )
nodes/fragment/17/node = SubResource( 18 )
nodes/fragment/17/position = Vector2( -200, 160 )
nodes/fragment/18/node = SubResource( 19 )
nodes/fragment/18/position = Vector2( 140, 280 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 1, 9, 0, 8, 1, 8, 0, 10, 0, 11, 0, 10, 1, 10, 0, 12, 0, 14, 0, 0, 3, 15, 0, 0, 2, 16, 0, 0, 0, 4, 0, 6, 1, 6, 0, 7, 0, 7, 0, 8, 0, 17, 0, 18, 0, 18, 0, 0, 5, 12, 0, 18, 3, 5, 0, 4, 0 )

[resource]
shader = SubResource( 11 )
shader_param/Metallic = 0.0
shader_param/Smoothness = 1.5
shader_param/Enable = true
shader_param/FresnelExponential = 6.0
shader_param/FresnelColor = Color( 1, 0, 0, 1 )
